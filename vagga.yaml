_default:
  gradle-home: &gradle-home /work/.gradle
  cmd-opts: &cmd-opts
    container: jdk
    user-id: 1
    external-user-id: 0
    prerequisites: [_mk-gradle-user-home]
    volumes:
      /tmp: !Tmpfs { size: 200M }
      /work/.gradle/caches: !CacheDir gradle-cache
      /work/.gradle/wrapper: !CacheDir gradle-wrapper

containers:
  jdk:
    environ:
      JAVA_HOME: /usr/lib/jvm/java-16-openjdk-amd64
      GRADLE_USER_HOME: *gradle-home
    setup:
    - !Ubuntu focal
    - !UbuntuUniverse
    - !Install
      - ca-certificates-java
      - openjdk-16-jdk-headless
      - git
    - !Sh update-ca-certificates

  elastic_version:
    setup:
    - !Ubuntu focal
    - !Install
      - git
    - !Sh |
        ES_VERSION=$(cat buildSrc/es-minimum.version)

  elastic:
    environ:
      ES_JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
    setup:
    - !Ubuntu focal
    - !Install [ca-certificates]
    - !UbuntuRepo
      url: https://artifacts.elastic.co/packages/7.x/apt
      trusted: true
      suite: stable
      components: [main]
    - !Env
      ES_SKIP_SET_KERNEL_PARAMETERS: true
    - !Install
      - openjdk-11-jdk-headless
      - git
    - !Depends buildSrc/es.version
    - !Sh apt-get install elasticsearch=$(cat buildSrc/es.version)
    - !EnsureDir /var/elasticsearch
    volumes:
      /var/lib/elasticsearch: !Persistent { name: elasticsearch_data }
      /var/log/elasticsearch: !Persistent { name: elasticsearch_logs }
    # auto-clean: true

commands:
  _mk-gradle-user-home: !Command
    container: jdk
    run: mkdir -p $GRADLE_USER_HOME/caches

  daemon: !Command
    <<: *cmd-opts
    description: Run gradle daemon
    run: |
      # --foreground option runs a daemon with incompatible jvm options
      # so another gradle process rejects to connect to the daemon
      ./gradlew --dry-run --daemon
      GRADLE_PID=$(pidof java)
      echo "Gradle daemon successfully started [PID: $GRADLE_PID]."
      while [ -e /proc/$GRADLE_PID ]; do sleep 1; done

  assemble: !Command
    <<: *cmd-opts
    description: Assembles the outputs of this project
    run: [./gradlew, assemble]

  assemble-with-version: !Command
    <<: *cmd-opts
    description: Assembles the outputs of this project
    run: [./gradlew, assemble, -PassembledVersion]

  build: !Command
    <<: *cmd-opts
    description: Assembles and tests this project
    run: [./gradlew, build]

  compile: !Command
    <<: *cmd-opts
    description: Compiles main source files
    run: [./gradlew, compile]

  compile-test: !Command
    <<: *cmd-opts
    description: Compiles test source files
    run: [./gradlew, compileTest]

  test-unit: !Command
    <<: *cmd-opts
    description: Runs unit tests
    run: [./gradlew, test]

  test-integ: !Command
    <<: *cmd-opts
    description: Runs integration tests
    run: [./gradlew, icTest]

  clean: !Command
    <<: *cmd-opts
    description: Deletes the build directory
    run: [./gradlew, clean]

  clean-build: !Command
    <<: *cmd-opts
    description: Deletes the build directory and then assembles and tests the project
    run: [./gradlew, clean, build]

  gradle: !Command
    <<: *cmd-opts
    description: Runs arbitrary gradle task
    run: [./gradlew]

  test: !Command
    <<: *cmd-opts
    description: "Run all tests: unit and integration"
    prerequisites:
    - test-unit
    - test-integ
    run: |
      echo "All tests are passed"

  elastic: !Command
    description: Run elasticsearch with the plugin
    container: elastic
    user-id: 1
    external-user-id: 0
    volumes:
      /usr/share/elasticsearch/plugins: !Tmpfs
    prerequisites: [assemble-with-version]
    run: |
      set -eux
      DIST_DIR=/work/build/distributions
      PROJECT_VERSION=$(cat $DIST_DIR/assembled.version)
      PLUGIN_PATH=$DIST_DIR/rescore-grouping-mixup-$PROJECT_VERSION.zip
      /usr/share/elasticsearch/bin/elasticsearch-plugin install file:${PLUGIN_PATH}
      /usr/share/elasticsearch/bin/elasticsearch \
        -E logger.company.evo.elasticsearch=debug
