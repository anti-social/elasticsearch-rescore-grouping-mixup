name: Java CI

on:
  push:
    branches:
    - '**'
    tags:
    - 'v*-es*'
  pull_request:

env:
  GRADLE_ARGS: "--info --stacktrace"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11

    - name: Cache gradle wrapper
      uses: actions/cache@v4
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-wrapper

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
        restore-keys: ${{ runner.os }}-gradle-deps

    - name: Assemble and run tests
      run: |
        set -eux
        ./gradlew assemble $GRADLE_ARGS
        ./gradlew test $GRADLE_ARGS
        ./gradlew integTest $GRADLE_ARGS

    - name: Save release version
      if: |
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags/v')
      run: |
        set -eux
        RELEASE_VERSION=$(echo $GITHUB_REF| sed 's/refs\/tags\/v\(.*\)/\1/')
        echo $RELEASE_VERSION > build/distributions/release.version
        ls -lh build/distributions

    - name: Upload plugin artifact
      uses: actions/upload-artifact@v4
      if: |
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags/v')
      with:
        name: elasticsearch-plugin
        path: |
          build/distributions/release.version
          build/distributions/*.zip

  release_es_plugin:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')
    needs:
    - build
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: elasticsearch-plugin

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false

    - name: Fetch release version
      run: |
        set -eux
        ls -l
        RELEASE_VERSION=$(cat release.version)
        echo "Found release: $RELEASE_VERSION"
        echo "RELEASE_ARTIFACT_NAME=rescore-grouping-mixup-$RELEASE_VERSION.zip" >> $GITHUB_ENV

    - name: Upload release
      id: upload-release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.RELEASE_ARTIFACT_NAME }}
        asset_name: ${{ env.RELEASE_ARTIFACT_NAME }}
        asset_content_type: application/zip